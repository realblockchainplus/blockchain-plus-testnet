/** Declaration file generated by dts-gen */

export class Logstash {
    constructor(options: any);

    announce(): void;

    close(): void;

    connect(): any;

    flush(): void;

    getQueueLength(): any;

    log(level: any, msg: any, meta: any, callback: any): any;

    sendLog(message: any, callback: any): void;

}

export namespace Logstash {
    namespace prototype {
        const name: string;

        function addListener(type: any, listener: any): any;

        function announce(): void;

        function close(): void;

        function connect(): any;

        function emit(type: any, args: any): any;

        function eventNames(): any;

        function flush(): void;

        function formatQuery(query: any): any;

        function formatResults(results: any, options: any): any;

        function getMaxListeners(): any;

        function getQueueLength(): any;

        function listenerCount(type: any): any;

        function listeners(type: any): any;

        function log(level: any, msg: any, meta: any, callback: any): any;

        function logException(msg: any, meta: any, callback: any): any;

        function normalizeQuery(options: any): any;

        function on(type: any, listener: any): any;

        function once(type: any, listener: any): any;

        function prependListener(type: any, listener: any): any;

        function prependOnceListener(type: any, listener: any): any;

        function rawListeners(type: any): any;

        function removeAllListeners(type: any, ...args: any[]): any;

        function removeListener(type: any, listener: any): any;

        function sendLog(message: any, callback: any): void;

        function setMaxListeners(n: any): any;

        namespace addListener {
            const prototype: {
            };

        }

        namespace announce {
            const prototype: {
            };

        }

        namespace close {
            const prototype: {
            };

        }

        namespace connect {
            const prototype: {
            };

        }

        namespace emit {
            const prototype: {
            };

        }

        namespace eventNames {
            const prototype: {
            };

        }

        namespace flush {
            const prototype: {
            };

        }

        namespace formatQuery {
            const prototype: {
            };

        }

        namespace formatResults {
            const prototype: {
            };

        }

        namespace getMaxListeners {
            const prototype: {
            };

        }

        namespace getQueueLength {
            const prototype: {
            };

        }

        namespace listenerCount {
            const prototype: {
            };

        }

        namespace listeners {
            const prototype: {
            };

        }

        namespace log {
            const prototype: {
            };

        }

        namespace logException {
            const prototype: {
            };

        }

        namespace normalizeQuery {
            const prototype: {
            };

        }

        namespace on {
            const prototype: {
            };

        }

        namespace once {
            const prototype: {
            };

        }

        namespace prependListener {
            const prototype: {
            };

        }

        namespace prependOnceListener {
            const prototype: {
            };

        }

        namespace rawListeners {
            const prototype: {
            };

        }

        namespace removeAllListeners {
            const prototype: {
            };

        }

        namespace removeListener {
            const prototype: {
            };

        }

        namespace sendLog {
            const prototype: {
            };

        }

        namespace setMaxListeners {
            const prototype: {
            };

        }

    }

}

